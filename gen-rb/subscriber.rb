#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.dirname(__FILE__) + '/pub_sub_types'

module Subscriber
  class Client
    include ::Thrift::Client

    def notify(user_attributes)
      send_notify(user_attributes)
      recv_notify()
    end

    def send_notify(user_attributes)
      send_message('notify', Notify_args, :user_attributes => user_attributes)
    end

    def recv_notify()
      result = receive_message(Notify_result)
      return
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_notify(seqid, iprot, oprot)
      args = read_args(iprot, Notify_args)
      result = Notify_result.new()
      @handler.notify(args.user_attributes)
      write_result(result, oprot, 'notify', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Notify_args
    include ::Thrift::Struct
    USER_ATTRIBUTES = 1

    ::Thrift::Struct.field_accessor self, :user_attributes
    FIELDS = {
      USER_ATTRIBUTES => {:type => ::Thrift::Types::LIST, :name => 'user_attributes', :element => {:type => ::Thrift::Types::STRUCT, :class => TUserAttribute}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

  class Notify_result
    include ::Thrift::Struct

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

  end

end

